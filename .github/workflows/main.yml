name: CI/CD - Deploy & Test WSO2MI

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}   # Will be converted to lowercase
  IMAGE_TAG: latest
  KUBE_NAMESPACE: ian
  DEPLOYMENT_NAME: wso2mi-deployment
  SERVICE_NAME: wso2mi-service
  EXPECTED_RESPONSE: '{"Hello World from WSO2MI"}'

jobs:
  build-deploy-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Lowercase IMAGE_NAME
        run: |
          echo "IMAGE_NAME_LC=${IMAGE_NAME,,}" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:${{ env.IMAGE_TAG }} 
          -f deployment/docker/Dockerfile deployment/docker


      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}:${{ env.IMAGE_TAG }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" > $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/hello-api.xml

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.KUBE_NAMESPACE }} --timeout=120s

      - name: Test helloAPI
        run: |
          NODE_PORT=$(kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          
          echo "Testing endpoint at http://$NODE_IP:$NODE_PORT/hello/"
          RESPONSE=$(curl -s http://$NODE_IP:$NODE_PORT/hello/)

          echo "Response: $RESPONSE"
          if [[ "$RESPONSE" != "${{ env.EXPECTED_RESPONSE }}" ]]; then
            echo "❌ API test failed"
            exit 1
          fi
          echo "✅ API test passed"
